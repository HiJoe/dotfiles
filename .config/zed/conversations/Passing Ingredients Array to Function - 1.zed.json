{"id":"1da7f1d0-e639-4e79-b933-4761a0312f9c","zed":"context","version":"0.4.0","text":"\n\n\n```js ChefClaude/ai.js\nimport Anthropic from \"@anthropic-ai/sdk\";\n\nconst SYSTEM_PROMPT = `You are an assistant that receives a list of ingredients that a user has and suggests a recipe they could make with some or all of those ingredients. You don't need to use every ingredient they mention in your recipe. The recipe can include additional ingredients they didn't mention, but try not to include too many extra ingredients. Format your response in markdown to make it easier to render to a web page`;\n\nconst anthropic = new Anthropic({\n  apiKey: \"process.env.ANTHROPIC_API_KEY\",\n  dangerouslyAllowBrowser: true,\n});\n\nexport async function getRecipeFromChefClaude(ingredientsArr) {\n  const ingredientString = ingredientsArr.join(\", \");\n\n  const msg = await anthropic.messages.create({\n    model: \"claude-3-haiku-20240307\",\n    max_tokens: 1024,\n    system: SYSTEM_PROMPT,\n    messages: [\n      {\n        role: \"user\",\n        content: `I have ${ingredientString}.  Please give me a recipe you'd recommend I make!`,\n      },\n    ],\n  });\n  return msg.content[0].text;\n}\n```\n\n\nw how can i pass the ingredientsArr parameter to this file \nTo pass the `ingredientsArr` parameter to this file, you would need to import and call the `getRecipeFromChefClaude` function from wherever you want to use it. Here's an example:\n\n```jsx\n// In your component file (e.g., RecipePage.jsx)\nimport { getRecipeFromChefClaude } from './ChefClaude/ai.js';\n\n// Example usage in a component\nfunction RecipePage() {\n  const handleGetRecipe = async () => {\n    // Example ingredients array\n    const ingredients = ['chicken', 'rice', 'carrots'];\n    \n    try {\n      const recipe = await getRecipeFromChefClaude(ingredients);\n      console.log(recipe);\n      // Do something with the recipe...\n    } catch (error) {\n      console.error('Error getting recipe:', error);\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={handleGetRecipe}>Get Recipe</button>\n    </div>\n  );\n}\n```\n\nOr if you're collecting ingredients from a form:\n\n```jsx\nimport { useState } from 'react';\nimport { getRecipeFromChefClaude } from './ChefClaude/ai.js';\n\nfunction RecipeForm() {\n  const [ingredients, setIngredients] = useState([]);\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const recipe = await getRecipeFromChefClaude(ingredients);\n      // Handle the recipe response...\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* Form inputs to collect ingredients */}\n    </form>\n  );\n}\n```\n\nThe key points are:\n1. Import the function using the correct path\n2. Call it with an array of ingredients\n3. Handle the async/await since it returns a Promise\n4. Handle any potential errors\n5. Do something with the returned recipe text\n\nRemember that the `ingredientsArr` should be an array of strings representing the ingredients you want to use in the recipe.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":57}}},{"id":{"replica_id":0,"value":35},"start":1139,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":58}}},{"id":{"replica_id":0,"value":36},"start":2926,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":59}}}],"summary":"Passing Ingredients Array to Function","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":3,"end":1077},"icon":"File","label":"ChefClaude/ai.js","metadata":{"path":"ChefClaude/ai.js"}}]}